@use 'sass:map';
@use '../context' as *;

$component-name: map.get($components-names, vv-textarea);
$component-map: $vv-textarea;
$component-selector: '.#{ $component-name}';

@include spread-map-into-bem(
	$map: $component-map,
	$block: $component-name,
	$props: $use-custom-props-for-components,
	$zero-specificity: $zero-specificity-for-components,
	$bps: $breakpoints
);

// disabled and readonly
@each $state in ('disabled', 'readonly') {
	@include wrap-with-where(
		$selector: '#{$component-selector}:has(textarea:#{$state})',
		$enabled: $zero-specificity-for-components
	) {
		@extend %#{$component-name}--#{$state} !optional;
	}

	@if map.get($component-map, 'state', $state, 'element') {
		@each $element,
			$map in map.get($component-map, 'state', $state, 'element')
		{
			@include wrap-with-where(
				$selector:
					'#{$component-selector}:has(textarea:#{$state}) #{$component-selector}__#{$element}',
				$enabled: $zero-specificity-for-components
			) {
				@extend %#{$component-name}-state-#{$state}__#{$element}
						!optional;
			}

			@each $elementState, $elementMap in map.get($map, 'state') {
				@include wrap-with-where(
					$selector:
						'#{$component-selector}:has(textarea:#{$state}) #{$component-selector}__#{$element}:#{$elementState}',
					$enabled: $zero-specificity-for-components
				) {
					@extend %#{$component-name}-state-#{$state}-element-#{$element}--#{$elementState}
							!optional;
				}
			}
		}
	}
}
